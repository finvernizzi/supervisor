{
  "name": "mplane",
  "version": "0.5.7-a",
  "description": "mPlane nodeJS implementation",
  "main": "mplane.js",
  "directories": {
    "examples": "Examples"
  },
  "dependencies": {
    "lodash": ">2.4.0",
    "cron": ">1.0.4",
    "url": ">0.7.9",
    "sha1": ">0.1.1",
    "fs": ">0.0.0",
    "util": ">0.10.0"
  },
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/finvernizzi/mplane"
  },
  "keywords": [
    "mPlane",
    "measurement"
  ],
  "author": {
    "name": "fabrizio.invernizzi@telecomitalia.it"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "[![mPlane](http://www.ict-mplane.eu/sites/default/files//public/mplane_final_256x_0.png)](http://www.ict-mplane.eu/)\n\n#mPlane nodeJS reference library \n[![](https://travis-ci.org/finvernizzi/mplane.svg)](https://travis-ci.org/finvernizzi/mplane)\n\n\nThis is the [mPlane](http://www.ict-mplane.eu/) nodejs library. \nThe architecture and software structure is freely inspired by [mPlane reference implementation](http://fp7mplane.github.io/protocol-ri/) written in python by Brian Trammell <brian@trammell.ch>.\n\n\n#Installation\n\n`npm install mplane`\n\n#Usage example\nIn this example we set a simple capability for a pinger probe. First of all import the main mPlane library\n\n```javascript\nvar mplane = require('mplane');\n\n// The IP address of the pinger\nvar __MY_IP__ = \"192.168.0.123\";\n\n// Initialize available primitives from the registry\nmplane.Element.initialize_registry(\"registry.json\");\n\n// Create a new mPlane Capability\nvar pingerCapability = new mplane.Capability();\n\n// Set the accepted time and periodicity\npingerCapability.set_when(\"now ... future / 1s\");\n\n// Add parameters with associated constraints\npingerCapability.add_parameter({\n    type:\"destination.ip4\",\n    constraints:\"192.168.0.1 ... 192.168.0.254\"\n});\npingerCapability.add_parameter({\n    type:\"number\",\n    constraints:\"1 ... 10\"\n});\npingerCapability.add_parameter({\n        type:\"source.ip4\",\n        constraints:__MY_IP__\n});\n\n// Add result columns\npingerCapability.add_result_column(\"delay.twoway\")\n    .set_metadata_value(\"System_type\",\"Pinger\")\n    .set_metadata_value(\"System_version\",\"0.1a\")\n    .set_metadata_value(\"System_ID\",\"Lab test machine\").update_token();\n    \n// Define a label\npingerCapability.set_label(\"DEMO pinger\");\n```\n\nPlease refer to the Examples directory for a working mPlane probe.\nFor a complete set of mPlane components (probe, supervisor and client) build by means of this repository, please refer to [mPlane components](https://github.com/finvernizzi/mplane_components).\n\n#Chainability\nEach mPlane function supports chainability\nFor example you can define all the parameters in a single chain:\n \n```javascript\n// Add parameters with associated constraints\npingerCapability.add_parameter({\n    type:\"destination.ip4\",\n    constraints:\"192.168.0.1 ... 192.168.0.254\"\n}).add_parameter({\n    type:\"number\",\n    constraints:\"1 ... 10\"\n}).add_parameter({\n        type:\"source.ip4\",\n        constraints:__MY_IP__\n});\n```\n\n#Interaction with the RI\nThe mPlane Reference Implementation, written in python, can be find [here](http://fp7mplane.github.io/protocol-ri/).\nIn order to correctly interact with any component using the RI messages formats, two method have been exposed in the library, to decode messages generated by the RI and to send messages to a RI component.\n\n##from_dict\nThis is a global method exposed in the mplane library. It sould be used to import any raw message received from an mPlane RI component.\nIt will generate an mplane object of the type contained in the message.\nIn the following example the data received as a body of an HTTP communication is imported in an mPlane object.\n\n```javascript\nvar result = mplane.from_dict(body);\n```\n\n## to_dict\nThis method, defined for any mPlane information element, should be used before sending data to a RI component.\nThe following example, shows how the pinger capability defined in the above probe example be transformed in a standard mPlane message. \n\n```javascript\n/* serialize the capability in an mPlane RI message*/\nvar RICapabilitySstatement = pingerCapability.to_dict();\n\n/* Shows the serialized capability*/\nconsole.log(RICapabilitySstatement);\n```\n\nThis is the output of the above example\n\n```json\n{\n\t\"capability\":\"measure\",\n\t\"label\":\"pinger_TI_test\",\n\t\"metadata\":{\n\t\t\"System_type\":\"Pinger\",\n\t\t\"System_version\":\"0.1a\",\n\t\t\"System_ID\":\"Lab test machine\"\n\t},\n\t\"link\":\"\",\n\t\"token\":\"c61ad8db5f9a4cc38e7ae8d8b5deae85ea93187b\",\n\t\"when\":\"now ... future / 1s\",\n\t\"resultvalues\":[],\n\t\"results\":[\"delay.twoway\"],\n\t\"parameters\":{\n\t\t\"destination.ip4\":\"192.168.0.1 ... 192.168.255.255\",\n\t\t\"number\":\"1 ... 10\",\n\t\t\"source.ip4\":\"192.168.0.1\"\n\t}\n}\n```\n\n\n#Transport\n\nThe base mPlane library implements the mPlane Information Model elements that can be used to build messages to be carried on top of any protocol of choice (SSH, HTTP,...).\nA nodejs HTTPS API has been implemented for basic usage (create and read elements) and can be find [here](https://github.com/finvernizzi/mplane_http_transport.git).\n\n#EXAMPLES\nA complete set of basic mPlane components is ready to use [here](https://github.com/finvernizzi/mplane_components). \n\n#Documentation\n\nPlease refer to the API reference [mPlane nodejs API](http://finvernizzi.github.io/mplane/)\n\n#Release Notes\n\nYou can find release notes [here](https://github.com/finvernizzi/mplane/blob/workInProgress/release_notes.md)",
  "bugs": {
    "url": "https://github.com/finvernizzi/mplane/issues"
  },
  "homepage": "https://github.com/finvernizzi/mplane",
  "_id": "mplane@0.5.7-a",
  "_from": "mplane@"
}
