{
  "name": "mplane_http_transport",
  "version": "0.1.12",
  "description": "mPlane HTTPS transport",
  "main": "mplane_http_transport.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/finvernizzi/mplane_http_transport.git"
  },
  "keywords": [
    "mplane",
    "measure",
    "http",
    "https"
  ],
  "dependencies": {
    "request": ">=2.0.0"
  },
  "author": {
    "name": "Fabrizio Invernizzi"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/finvernizzi/mplane_http_transport/issues"
  },
  "homepage": "https://github.com/finvernizzi/mplane_http_transport",
  "readme": "mplane_http_transport\n=====================\n\n[![mPlane](http://www.ict-mplane.eu/sites/default/files//public/mplane_final_256x_0.png)](http://www.ict-mplane.eu/)\n\nThis library implements a nodejs module for transport of [mPlane](http://www.ict-mplane.eu/) informational elements over HTTPS.\nAll transaction can be secured using trusted certificates.\n\n#REST API\nThe implementation has a limited set of  [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) set of messages.\nIn particular, for any of the mPlane informational elements, it is possible to Create and Read them between mPlane components.\n\n\n##REGISTER\nThe register keyword is the Create message for an element.\n\n###Capability\nUse this message to register a list of capabilities.\n\n    URL: /register/capability\n    METHOD: POST\n    BODY: json array containing the capabilities.\n    ANSWER:\n           + 200 OK. Operations completed. The body can contain a list of capabilityes not registered with some explanation\n                    Example: {\"label1\":{registered:\"no\", reason:\"...\"} , \"label1\":{registered:\"ok\"}})\n           + 400 not a capability/wrong format\n           + 401 not authorized\n           + 500 server error\n\nThis is an example of the body format generated by a probe to register on a supervisor.\n\n```json\n[ \n  { \n    \"capability\": \"measure\",\n    \"label\": \"pinger_TI_test\",\n    \"metadata\":\n     { \"System_type\": \"Pinger\",\n       \"System_version\": \"0.1a\",\n       \"System_ID\": \"Lab test machine\" \n     },\n    \"link\": \"\",\n    \"token\": \"c61ad8db5f9a4cc38e7ae8d8b5deae85ea93187b\",\n    \"when\": \"now ... future / 1s\",\n    \"resultvalues\": [],\n    \"results\": [ \"delay.twoway\" ],\n    \"parameters\":{ \n        \"destination.ip4\": \"192.168.0.1 ... 192.168.255.255\",\n        \"number\": \"1 ... 10\",\n       \"source.ip4\": \"192.168.0.1\" \n    } \n  },\n  { \n    \"capability\": \"measure\",\n    \"label\": \"tracer_TI_test\",\n    \"metadata\":{ \n        \"System_type\": \"Tracer\",\n       \"System_version\": \"0.1a\",\n       \"System_ID\": \"Lab test machine\" \n    },\n    \"link\": \"\",\n    \"token\": \"361dcee90873ade735326ad411f87a995816ed20\",\n    \"when\": \"now ... future / 1s\",\n    \"resultvalues\": [],\n    \"results\": [ \"delay.twoway\", \"hops.ip\" ],\n    \"parameters\":{ \n        \"destination.ip4\": \"192.168.0.1 ... 192.168.255.255\",\n        \"source.ip4\": \"192.168.0.1\" \n     } \n  } \n]\n```\n\n###Result\nUse this message to register a result.\n    \n    URL:/register/result\n    METHOD:POST\n    BODY: the result object\n    ANSWER:\n        + 200 OK\n        + 400 not a result/wrong format\n        + 401 not authorized\n        + 403 unexpected result. Usually this is due to no specification known for this result.\n        + 500 server error\n        \nFollowing json snippet is an example of a result message generated by a probe after a measure.\n\n```json\n{\n    \"result\":\"measure\",\n    \"label\":\"tracer_TI_test\",\n    \"metadata\":{\n        \"System_type\":\"Tracer\",\n        \"System_version\":\"0.1a\",\n        \"System_ID\":\"Lab test machine\",\n        \"eventTime\":\"2014-10-02T15:43:09.397Z\",\n        \"specification_status\":\"queued\"\n     },\n     \"link\":\"\",\n     \"token\":\"361dcee90873ade735326ad411f87a995816ed20\",\n     \"when\":\"2014-09-29 10:19:26.765203 ... 2014-09-29 10:19:27.767020\",\n     \"resultvalues\":[[0.3,1]],\n     \"results\":[\"delay.twoway\",\"hops.ip\"],\n     \"parameters\":{\n        \"destination.ip4\":\"192.168.0.4\",\n        \"source.ip4\":\"192.168.0.1\"\n     }\n}\n```\n\n##Specification\nUse this message to register a specification for a component.\n  \n    URL: /register/specification\n    METHOD: POST\n    BODY: {DistinguishedName:{specification}}. The distinguished name of the component you need to register a specification for\n    ANSWER:\n        + 200 OK. The body will contain the receipt of the required specification\n        + 400 not a specification/wrong format\n        + 401 not authorized\n        + 403 unrecognized specification. Usually this is due to no capability known for this specification.\n        + 500 server error\n \nFollowing code is an example of Specification message generated by a client to register a new Specification on a Supervisor for a specific registered probe (pinger1.TI.mplane.org)\n\n```json\n{\n    \"pinger1.TI.mplane.org\":{\n            \"specification\":\"measure\",\n            \"label\":\"pinger_TI_test\",\n            \"metadata\":{\n                \"System_type\":\"Pinger\",\n                \"System_version\":\"0.1a\",\n                \"System_ID\":\"Lab test machine\",\n                \"eventTime\":\"2014-10-02T15:47:07.634Z\"},\n                \"link\":\"\",\n                \"token\":\"c61ad8db5f9a4cc38e7ae8d8b5deae85ea93187b\",\n                \"when\":\"now + 1s\",\n                \"resultvalues\":[],\n                \"results\":[\"delay.twoway\"],\n                \"parameters\":{\n                    \"destination.ip4\":\"192.168.0.4\",\n                    \"number\":\"5\",\n                    \"source.ip4\":\"192.168.0.1\"\n                }\n        }\n}\n```\n\n##SHOW\nThese set of messages is implemented to read information from specific mPlane component. \n\n###Result\nUse this message to show result from a receipt.\n    \n    URL:/show/result\n    METHOD:POST\n    BODY: redemption of the specification you need to know results.\n    ANSWER:\n        + If the result is available\n            200 OK + result \n        + If the Result is not available\n            200 OK + receipt of the Specification\n        + 401 not authorized\n        + 403 unexpected redemption. Usually this is due to no Specification kwnon for the redeem provided.\n        + 500 server error\n\n###Capability\nUse this message to show capability kwnon by a component.\n\n        URL:/show/capability\n        METHOD:GET\n        BODY: empty\n        ANSWER:\n               + 200 OK. The body contains the capabilities in the format {DN1:[capability1, capability2],â€¦}\n               + 401 not authorized\n               + 500 server error\n               \n               \nFollowing code is an example of json body generated by a Supervisor upon request of all the registered capabilities\n\n```json\n{ \n    \"pinger1.TI.mplane.org\":\n             [ \n                 { \n                       \"capability\": \"measure\",\n                       \"label\": \"pinger_TI_test\",\n                       \"metadata\": [Object],\n                       \"link\": \"\",\n                       \"token\": \"c61ad8db5f9a4cc38e7ae8d8b5deae85ea93187b\",\n                       \"when\": \"now ... future / 1s\",\n                       \"resultvalues\": [],\n                       \"results\": [Object],\n                       \"parameters\": [Object] \n                 },\n                 { \n                    \"capability\": \"measure\",\n                    \"label\": \"tracer_TI_test\",\n                    \"metadata\": [Object],\n                    \"link\": \"\",\n                    \"token\": \"361dcee90873ade735326ad411f87a995816ed20\",\n                    \"when\": \"now ... future / 1s\",\n                    \"resultvalues\": [],\n                    \"results\": [Object],\n                    \"parameters\": [Object] \n                 } \n             ] \n}\n```\n\n###Specification\nThis Api is needed to show Specification registered on a component.\n\n        URL:/show/specification\n        METHOD:GET\n        BODY: empty\n        ANSWER:\n               + 200 OK. The body contains an array of specifications. Component can filter Specifications from the provided DN.\n               + 401 not authorized\n               + 428 not registered. This message is returned if the component needs to have at least a registered capability from the Component. \n                    It is a way to inform all probes that a Supervisor lost all the capability (for example after a crash) and ask probes to register again. \n               + 500 server error",
  "readmeFilename": "README.md",
  "_id": "mplane_http_transport@0.1.12",
  "dist": {
    "shasum": "34f3408969bcca32d7c3a808ba4d57733c844723"
  },
  "_from": "mplane_http_transport@",
  "_resolved": "https://registry.npmjs.org/mplane_http_transport/-/mplane_http_transport-0.1.12.tgz"
}
